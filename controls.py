class Control:
    def __init__(self, control_index, control_id, control_type, min_val, max_val):
        self.control_index = control_index
        self.control_id = control_id
        self.control_type = control_type
        self.min_val = min_val
        self.max_val = max_val

    def get_payload(self, val):
        assert self.min_val <= val <= self.max_val, val

        return (
            self.control_index
            + self.control_id
            + [self.control_type]
            + list(val.to_bytes(length=4, byteorder="big"))
        )


controls = {
    "brightness": Control([0x00, 0x00], [0x00, 0x98, 0x09, 0x00], 0x01, 1, 5),
    "contrast": Control([0x00, 0x01], [0x00, 0x98, 0x09, 0x01], 0x01, 1, 10),
    "saturation": Control([0x00, 0x02], [0x00, 0x98, 0x09, 0x02], 0x01, 0, 10),
    "horizontal_flip": Control([0x00, 0x03], [0x00, 0x98, 0x09, 0x14], 0x01, 0, 1),
    "vertical_flip": Control([0x00, 0x04], [0x00, 0x98, 0x09, 0x15], 0x01, 0, 1),
    "auto_exposure": Control([0x00, 0x08], [0x00, 0x9A, 0x09, 0x01], 0x01, 0, 2),
    "exposure_time": Control([0x00, 0x09], [0x00, 0x9A, 0x09, 0x02], 0x01, 10, 5000),
    "gain": Control([0x00, 0x0B], [0x00, 0x98, 0x09, 0x13], 0x01, 1, 8),
    "hdr": Control([0x00, 0x0C], [0x00, 0x9A, 0x09, 0x28], 0x01, 0, 1),
    "frame_sync": Control([0x00, 0x11], [0x00, 0x9A, 0x09, 0x2B], 0x01, 0, 1),
    "denoise": Control([0x00, 0x13], [0x00, 0x9A, 0x09, 0x2E], 0x01, 0, 1),
}
